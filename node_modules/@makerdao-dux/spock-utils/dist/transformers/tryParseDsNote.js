"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.tryParseDsNoteVer2 = exports.tryParseDsNote = void 0;
const ethers_1 = require("ethers");
// NOTE: this is NOT DsNote abi! This was modified to be non-anon event with dummy name because we can't parse anon events
const logNoteAbi = [
    {
        inputs: [
            { indexed: true, name: 'sig', type: 'bytes4' },
            { indexed: true, name: 'guy', type: 'address' },
            { indexed: true, name: 'foo', type: 'bytes32' },
            { indexed: true, name: 'bar', type: 'bytes32' },
            { indexed: false, name: 'wad', type: 'uint256' },
            { indexed: false, name: 'fax', type: 'bytes' },
        ],
        name: 'LogNote',
        type: 'event',
    },
];
const logNoteIface = new ethers_1.ethers.utils.Interface(logNoteAbi);
function tryParseDsNote(topics, data) {
    try {
        return logNoteIface.parseLog({
            data: data,
            topics: [logNoteIface.events.LogNote.topic, ...topics],
        });
    }
    catch { }
}
exports.tryParseDsNote = tryParseDsNote;
const logNoteVer2Abi = [
    {
        inputs: [
            { indexed: true, name: 'sig', type: 'bytes4' },
            { indexed: true, name: 'guy', type: 'address' },
            { indexed: true, name: 'foo', type: 'bytes32' },
            { indexed: true, name: 'bar', type: 'bytes32' },
            { indexed: false, name: 'fax', type: 'bytes' },
        ],
        name: 'LogNote',
        type: 'event',
    },
];
const logNoteVer2Iface = new ethers_1.ethers.utils.Interface(logNoteVer2Abi);
function tryParseDsNoteVer2(topics, data) {
    try {
        return logNoteVer2Iface.parseLog({
            data: data,
            topics: [logNoteVer2Iface.events.LogNote.topic, ...topics],
        });
    }
    catch (e) { }
}
exports.tryParseDsNoteVer2 = tryParseDsNoteVer2;
//# sourceMappingURL=tryParseDsNote.js.map