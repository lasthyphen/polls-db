"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.withLock = void 0;
const node_cleanup_1 = __importDefault(require("node-cleanup"));
const logger_1 = require("../utils/logger");
const promises_1 = require("../utils/promises");
const logger = logger_1.getLogger('db/utils');
async function withLock(db, id, fn) {
    const connection = await acquire(db, id);
    node_cleanup_1.default(() => {
        return release(connection, id);
    });
    try {
        await fn();
    }
    finally {
        await release(connection, id);
        connection.done();
        node_cleanup_1.default.uninstall();
    }
}
exports.withLock = withLock;
async function acquire(db, id) {
    logger.info(`Trying to acquire lock: ${id}`);
    const connection = await db.connect();
    let isAcquired = false;
    while (!isAcquired) {
        const result = await connection.one('SELECT pg_try_advisory_lock(${id});', {
            id,
        });
        isAcquired = result.pg_try_advisory_lock;
        if (!isAcquired) {
            logger.info('Retrying...');
            await promises_1.delay(500);
        }
    }
    logger.info(`Acquired lock: ${id}`);
    return connection;
}
async function release(connection, id) {
    logger.info(`Releasing lock: ${id}`);
    await connection.one('SELECT pg_advisory_unlock(${id});', { id: id });
    logger.info(`Released lock: ${id}`);
}
//# sourceMappingURL=locks.js.map