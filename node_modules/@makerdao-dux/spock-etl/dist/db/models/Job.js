"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.excludeAllJobs = exports.stopJob = exports.setJobStatus = exports.getAllJobs = exports.getJob = exports.saveJob = void 0;
const db_1 = require("../db");
async function saveJob(c, job, schema) {
    const saveSQL = `
  INSERT INTO ${schema}.job(name, last_block_id, status)
  VALUES('${job.name}', ${job.last_block_id}, '${job.status}')
  `;
    await c.none(saveSQL);
}
exports.saveJob = saveJob;
async function getJob(c, jobName, schema) {
    const getSQL = `
      SELECT * FROM ${schema}.job j
      WHERE j.name='${jobName}'
      `;
    return await c.oneOrNone(getSQL).then(db_1.makeNullUndefined);
}
exports.getJob = getJob;
async function getAllJobs(c, schema) {
    const countJobsDoneSQL = `
  SELECT * FROM ${schema}.job;
  `;
    const jobs = await c.many(countJobsDoneSQL);
    return jobs;
}
exports.getAllJobs = getAllJobs;
async function setJobStatus(c, job, newStatus, schema) {
    const sql = `
    UPDATE ${schema}.job
    SET status=\${newStatus}, extra_info=NULL
    WHERE name=\${jobName}
  `;
    await c.none(sql, { newStatus, jobName: job.name });
}
exports.setJobStatus = setJobStatus;
async function stopJob(c, jobName, extraInfo, schema) {
    const sql = `
    UPDATE ${schema}.job
    SET status='stopped', extra_info=\${extraInfo}
    WHERE name=\${jobName}
  `;
    await c.none(sql, { extraInfo, jobName });
}
exports.stopJob = stopJob;
async function excludeAllJobs(c, schema) {
    const sql = `
    UPDATE ${schema}.job
    SET status='not-ready';
  `;
    await c.none(sql);
}
exports.excludeAllJobs = excludeAllJobs;
//# sourceMappingURL=Job.js.map