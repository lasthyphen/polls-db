"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getColumnSets = exports.makeNullUndefined = exports.withConnection = exports.createDB = void 0;
const pg_promise_1 = __importDefault(require("pg-promise"));
const logger_1 = require("../utils/logger");
const logger = logger_1.getLogger('db');
function createDB(config) {
    const PgClient = pg_promise_1.default({
        receive: (_data, res, e) => {
            // avoid clutter in output
            if (e.query === 'begin' || e.query === 'commit') {
                return;
            }
            logger.trace(`${e.query} (${res.duration} ms)`);
            if ((res.duration || 0) / 1000 > 5) {
                logger.warn(`SLOW QUERY DETECTED! TOOK: ${res.duration} ms`, e.query);
            }
        },
    });
    return {
        pg: PgClient,
        db: PgClient({ ...config }),
        getColumnSetsForChain: (processorSchema, extractedSchema) => getColumnSets(PgClient, processorSchema, extractedSchema),
    };
}
exports.createDB = createDB;
async function withConnection(db, action) {
    let connection;
    try {
        connection = await db.connect();
        return await action(connection);
    }
    finally {
        if (connection) {
            connection.done();
        }
    }
}
exports.withConnection = withConnection;
function makeNullUndefined(value) {
    if (value === null) {
        return undefined;
    }
    return value;
}
exports.makeNullUndefined = makeNullUndefined;
function getColumnSets(pg, processorSchema, extractedSchema) {
    return {
        block: new pg.helpers.ColumnSet(['number', 'hash', 'timestamp'], {
            table: new pg.helpers.TableName({ table: 'block', schema: processorSchema }),
        }),
        extracted_logs: new pg.helpers.ColumnSet(['block_id', 'tx_id', 'log_index', 'address', 'data', 'topics'], {
            table: new pg.helpers.TableName({ table: 'logs', schema: extractedSchema }),
        }),
    };
}
exports.getColumnSets = getColumnSets;
//# sourceMappingURL=db.js.map