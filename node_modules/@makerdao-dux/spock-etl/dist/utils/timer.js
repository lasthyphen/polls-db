"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.printTimersSummary = exports.timer = void 0;
const convert_hrtime_1 = __importDefault(require("convert-hrtime"));
const lodash_1 = require("lodash");
const pretty_ms_1 = __importDefault(require("pretty-ms"));
const config_1 = require("../services/config");
const logger_1 = require("./logger");
const logger = logger_1.getLogger('Timer');
const timerStats = {};
const noop = () => { };
function timer(label, extra) {
    if (config_1.isProd()) {
        return noop;
    }
    timerStats[label] = timerStats[label] || [];
    const startTime = process.hrtime();
    return () => {
        const result = process.hrtime(startTime);
        const resultInMs = tryOrDefault(() => convert_hrtime_1.default(result).milliseconds, 0);
        logger.info(`${label} ${extra ? `(${extra})` : ''} took: ${pretty_ms_1.default(resultInMs)}`);
        timerStats[label].push(resultInMs);
    };
}
exports.timer = timer;
function printTimersSummary() {
    if (config_1.isProd()) {
        return;
    }
    for (const [name, measurements] of lodash_1.entries(timerStats)) {
        if (measurements.length === 0) {
            logger.info(`${name} - no data`);
            continue;
        }
        const sum = measurements.reduce((a, c) => a + c, 0) || 0;
        const avg = measurements.length ? sum / measurements.length : 0;
        const min = Math.min(...measurements);
        const max = Math.max(...measurements);
        logger.info(
        // prettier-ignore
        `${name} - sum (${pretty_ms_1.default(sum)}), avg (${pretty_ms_1.default(avg)}), min (${pretty_ms_1.default(min)}), max (${pretty_ms_1.default(max)})`);
        // clear stats
        timerStats[name] = [];
    }
    logger.info('--------');
}
exports.printTimersSummary = printTimersSummary;
function tryOrDefault(fn, def) {
    try {
        return fn();
    }
    catch {
        return def;
    }
}
//# sourceMappingURL=timer.js.map