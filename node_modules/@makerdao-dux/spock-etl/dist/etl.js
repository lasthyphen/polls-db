"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.startETL = exports.etl = void 0;
const ethers = __importStar(require("ethers"));
const blockGenerator_1 = require("./blockGenerator/blockGenerator");
const db_1 = require("./db/db");
const locks_1 = require("./db/locks");
const process_1 = require("./processors/process");
const register_1 = require("./processors/register");
const config_1 = require("./services/config");
const services_1 = require("./services/services");
const stats_1 = require("./stats/stats");
const logger_1 = require("./utils/logger");
const printSystemInfo_1 = require("./utils/printSystemInfo");
ethers.errors.setLogLevel('error');
const logger = logger_1.getLogger('runner');
async function etl(configs) {
    // Each config will have identical db settings, but we don't want to create
    // duplicate connections to the db, so, arbitrarily, we just use the first.
    const [firstConfig] = configs;
    const dbCtx = db_1.createDB(firstConfig.db);
    const chainServices = await Promise.all(configs.map((config) => {
        printSystemInfo_1.printSystemInfo(config);
        return services_1.createServices(config, dbCtx);
    }));
    return startETL(chainServices);
}
exports.etl = etl;
async function startETL(chainServices) {
    // Begin processing for each chain service
    await Promise.all(chainServices.map((services, i) => locks_1.withLock(services.db, services.config.processDbLock + i, async () => {
        if (services.config.onStart) {
            logger.debug('Running onStart hook.');
            await services.config.onStart(services);
        }
        await register_1.registerProcessors(services, config_1.getAllProcessors(services.config));
        await register_1.registerChain(services);
        const blockGenerator = new blockGenerator_1.BlockGenerator(services);
        await blockGenerator.init();
        await Promise.all([
            blockGenerator.run(services.config.startingBlock, services.config.lastBlock),
            process_1.process(services, services.config.extractors),
            process_1.process(services, services.config.transformers),
            services.config.statsWorker.enabled ? stats_1.statsWorker(services) : Promise.resolve(),
        ]);
        await blockGenerator.deinit();
    })));
}
exports.startETL = startETL;
//# sourceMappingURL=etl.js.map