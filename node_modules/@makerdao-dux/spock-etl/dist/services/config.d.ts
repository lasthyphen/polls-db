import { DeepPartial, Dictionary } from 'ts-essentials';
import * as z from 'zod';
import { Processor } from '../processors/types';
import { Env } from './configUtils';
export declare const spockConfigSchema: z.ZodObject<{
    name: z.ZodString;
    processorSchema: z.ZodString;
    extractedSchema: z.ZodString;
    startingBlock: z.ZodNumber;
    lastBlock: z.ZodOptional<z.ZodNumber>;
    extractors: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        startingBlock: z.ZodOptional<z.ZodNumber>;
        extractorDependencies: z.ZodOptional<z.ZodArray<z.ZodString>>;
        disablePerfBoost: z.ZodOptional<z.ZodBoolean>;
        extract: z.ZodType<(...args: any[]) => any, z.ZodTypeDef, (...args: any[]) => any>;
        getData: z.ZodType<(...args: any[]) => any, z.ZodTypeDef, (...args: any[]) => any>;
    }, "passthrough", z.ZodTypeAny, {
        startingBlock?: number | undefined;
        extractorDependencies?: string[] | undefined;
        disablePerfBoost?: boolean | undefined;
        name: string;
        extract: (...args: any[]) => any;
        getData: (...args: any[]) => any;
    }, {
        startingBlock?: number | undefined;
        extractorDependencies?: string[] | undefined;
        disablePerfBoost?: boolean | undefined;
        name: string;
        extract: (...args: any[]) => any;
        getData: (...args: any[]) => any;
    }>>;
    transformers: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        startingBlock: z.ZodOptional<z.ZodNumber>;
        dependencies: z.ZodArray<z.ZodString>;
        transformerDependencies: z.ZodOptional<z.ZodArray<z.ZodString>>;
        transform: z.ZodType<(...args: any[]) => any, z.ZodTypeDef, (...args: any[]) => any>;
    }, "passthrough", z.ZodTypeAny, {
        startingBlock?: number | undefined;
        transformerDependencies?: string[] | undefined;
        name: string;
        dependencies: string[];
        transform: (...args: any[]) => any;
    }, {
        startingBlock?: number | undefined;
        transformerDependencies?: string[] | undefined;
        name: string;
        dependencies: string[];
        transform: (...args: any[]) => any;
    }>>;
    migrations: z.ZodAny;
    onStart: z.ZodType<(...args: any[]) => any, z.ZodTypeDef, (...args: any[]) => any>;
    processDbLock: z.ZodNumber;
    blockGenerator: z.ZodObject<{
        batch: z.ZodNumber;
    }, "passthrough", z.ZodTypeAny, {
        batch: number;
    }, {
        batch: number;
    }>;
    extractorWorker: z.ZodObject<{
        batch: z.ZodNumber;
        reorgBuffer: z.ZodNumber;
    }, "passthrough", z.ZodTypeAny, {
        batch: number;
        reorgBuffer: number;
    }, {
        batch: number;
        reorgBuffer: number;
    }>;
    transformerWorker: z.ZodObject<{
        batch: z.ZodNumber;
    }, "passthrough", z.ZodTypeAny, {
        batch: number;
    }, {
        batch: number;
    }>;
    processorsWorker: z.ZodObject<{
        retriesOnErrors: z.ZodNumber;
    }, "passthrough", z.ZodTypeAny, {
        retriesOnErrors: number;
    }, {
        retriesOnErrors: number;
    }>;
    statsWorker: z.ZodObject<{
        enabled: z.ZodBoolean;
        interval: z.ZodNumber;
    }, "passthrough", z.ZodTypeAny, {
        enabled: boolean;
        interval: number;
    }, {
        enabled: boolean;
        interval: number;
    }>;
    chain: z.ZodObject<{
        host: z.ZodString;
        name: z.ZodString;
        retries: z.ZodNumber;
    }, "passthrough", z.ZodTypeAny, {
        name: string;
        host: string;
        retries: number;
    }, {
        name: string;
        host: string;
        retries: number;
    }>;
    db: z.ZodUnion<[z.ZodObject<{
        database: z.ZodString;
        user: z.ZodString;
        password: z.ZodString;
        host: z.ZodString;
        port: z.ZodNumber;
    }, "passthrough", z.ZodTypeAny, {
        database: string;
        user: string;
        password: string;
        host: string;
        port: number;
    }, {
        database: string;
        user: string;
        password: string;
        host: string;
        port: number;
    }>, z.ZodRecord<z.ZodString>]>;
    sentry: z.ZodOptional<z.ZodObject<{
        dsn: z.ZodString;
        environment: z.ZodString;
    }, "passthrough", z.ZodTypeAny, {
        dsn: string;
        environment: string;
    }, {
        dsn: string;
        environment: string;
    }>>;
}, "passthrough", z.ZodTypeAny, {
    lastBlock?: number | undefined;
    migrations?: any;
    sentry?: {
        dsn: string;
        environment: string;
    } | undefined;
    db: {
        database: string;
        user: string;
        password: string;
        host: string;
        port: number;
    } | Record<string, string>;
    name: string;
    startingBlock: number;
    processorSchema: string;
    extractedSchema: string;
    extractors: {
        startingBlock?: number | undefined;
        extractorDependencies?: string[] | undefined;
        disablePerfBoost?: boolean | undefined;
        name: string;
        extract: (...args: any[]) => any;
        getData: (...args: any[]) => any;
    }[];
    transformers: {
        startingBlock?: number | undefined;
        transformerDependencies?: string[] | undefined;
        name: string;
        dependencies: string[];
        transform: (...args: any[]) => any;
    }[];
    onStart: (...args: any[]) => any;
    processDbLock: number;
    blockGenerator: {
        batch: number;
    };
    extractorWorker: {
        batch: number;
        reorgBuffer: number;
    };
    transformerWorker: {
        batch: number;
    };
    processorsWorker: {
        retriesOnErrors: number;
    };
    statsWorker: {
        enabled: boolean;
        interval: number;
    };
    chain: {
        name: string;
        host: string;
        retries: number;
    };
}, {
    lastBlock?: number | undefined;
    migrations?: any;
    sentry?: {
        dsn: string;
        environment: string;
    } | undefined;
    db: {
        database: string;
        user: string;
        password: string;
        host: string;
        port: number;
    } | Record<string, string>;
    name: string;
    startingBlock: number;
    processorSchema: string;
    extractedSchema: string;
    extractors: {
        startingBlock?: number | undefined;
        extractorDependencies?: string[] | undefined;
        disablePerfBoost?: boolean | undefined;
        name: string;
        extract: (...args: any[]) => any;
        getData: (...args: any[]) => any;
    }[];
    transformers: {
        startingBlock?: number | undefined;
        transformerDependencies?: string[] | undefined;
        name: string;
        dependencies: string[];
        transform: (...args: any[]) => any;
    }[];
    onStart: (...args: any[]) => any;
    processDbLock: number;
    blockGenerator: {
        batch: number;
    };
    extractorWorker: {
        batch: number;
        reorgBuffer: number;
    };
    transformerWorker: {
        batch: number;
    };
    processorsWorker: {
        retriesOnErrors: number;
    };
    statsWorker: {
        enabled: boolean;
        interval: number;
    };
    chain: {
        name: string;
        host: string;
        retries: number;
    };
}>;
export declare type SpockConfig = z.infer<typeof spockConfigSchema>;
export declare type UserProvidedSpockConfig = DeepPartial<SpockConfig> & Pick<SpockConfig, 'startingBlock' | 'lastBlock' | 'extractors' | 'transformers' | 'migrations'> & Dictionary<any>;
export declare function getDefaultConfig(env: Env): DeepPartial<SpockConfig>;
export declare function isProd(): boolean;
export declare function getAllProcessors(config: SpockConfig): Processor[];
