"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAllProcessors = exports.isProd = exports.getDefaultConfig = exports.spockConfigSchema = void 0;
const z = __importStar(require("zod"));
const configUtils_1 = require("./configUtils");
const AnyFunc = z.any().refine((o) => o instanceof Function);
const extractorSchema = z.object({
    name: z.string(),
    startingBlock: z.number().optional(),
    extractorDependencies: z.array(z.string()).optional(),
    disablePerfBoost: z.boolean().optional(),
    extract: AnyFunc,
    getData: AnyFunc,
});
const transformerSchema = z.object({
    name: z.string(),
    startingBlock: z.number().optional(),
    dependencies: z.array(z.string()),
    transformerDependencies: z.array(z.string()).optional(),
    transform: AnyFunc,
});
const blockGeneratorSchema = z.object({
    batch: z.number(),
});
const extractorWorkerSchema = z.object({
    batch: z.number(),
    reorgBuffer: z.number(),
});
const transformerWorkerSchema = z.object({
    batch: z.number(),
});
const processorsWorkerSchema = z.object({
    retriesOnErrors: z.number(),
});
const statsWorkerSchema = z.object({
    enabled: z.boolean(),
    interval: z.number(),
});
exports.spockConfigSchema = z
    .object({
    name: z.string(),
    processorSchema: z.string(),
    extractedSchema: z.string(),
    startingBlock: z.number(),
    lastBlock: z.number().optional(),
    extractors: z.array(extractorSchema),
    transformers: z.array(transformerSchema),
    migrations: z.any(),
    onStart: AnyFunc,
    processDbLock: z.number(),
    blockGenerator: blockGeneratorSchema,
    extractorWorker: extractorWorkerSchema,
    transformerWorker: transformerWorkerSchema,
    processorsWorker: processorsWorkerSchema,
    statsWorker: statsWorkerSchema,
    chain: z.object({
        host: z.string(),
        name: z.string(),
        retries: z.number(),
    }),
    db: z.union([
        z.object({
            database: z.string(),
            user: z.string(),
            password: z.string(),
            host: z.string(),
            port: z.number(),
        }),
        z.record(z.string()),
    ]),
    sentry: z
        .object({
        dsn: z.string(),
        environment: z.string(),
    })
        .optional(),
})
    .nonstrict();
function getDefaultConfig(env) {
    return {
        processDbLock: 0x1337,
        blockGenerator: {
            batch: 1,
        },
        extractorWorker: {
            batch: 10,
            reorgBuffer: 20,
        },
        transformerWorker: {
            batch: 10,
        },
        processorsWorker: {
            retriesOnErrors: 10,
        },
        statsWorker: {
            enabled: true,
            interval: 10,
        },
        db: {
            database: configUtils_1.getRequiredString(env, 'VL_DB_DATABASE'),
            user: configUtils_1.getRequiredString(env, 'VL_DB_USER'),
            password: configUtils_1.getRequiredString(env, 'VL_DB_PASSWORD'),
            host: configUtils_1.getRequiredString(env, 'VL_DB_HOST'),
            port: configUtils_1.getRequiredNumber(env, 'VL_DB_PORT'),
        },
    };
}
exports.getDefaultConfig = getDefaultConfig;
function isProd() {
    return process.env.NODE_ENV === 'production';
}
exports.isProd = isProd;
function getAllProcessors(config) {
    return [...config.extractors, ...config.transformers];
}
exports.getAllProcessors = getAllProcessors;
//# sourceMappingURL=config.js.map