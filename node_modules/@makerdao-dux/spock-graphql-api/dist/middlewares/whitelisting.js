"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.whitelisting = void 0;
const logger_1 = require("@makerdao-dux/spock-etl/dist/utils/logger");
const express_1 = require("express");
const fs = __importStar(require("fs"));
const lodash_1 = require("lodash");
const logger = logger_1.getLogger('whitelisting');
function whitelisting(absPathToQueryDefs, bypassSecret) {
    const allowedQueries = readEntities(absPathToQueryDefs, '.graphql');
    logger.info(`Allowed queries (${Object.keys(allowedQueries).length}): ${Object.keys(allowedQueries).join(', ')}`);
    return (req, _resp, next) => {
        if (req.method !== 'POST') {
            next();
            return;
        }
        const devModeRequest = (req.body.variables || {}).devMode;
        if (devModeRequest && devModeRequest !== bypassSecret) {
            console.log('Attempt to request dev mode but wrong secret was provided');
            express_1.response.sendStatus(403);
            return;
        }
        if (devModeRequest && devModeRequest === bypassSecret) {
            console.log('Dev mode requested with correct secret');
            next();
            return;
        }
        if (Object.prototype.hasOwnProperty.call(allowedQueries, req.body.operationName)) {
            req.body.query = allowedQueries[req.body.operationName];
        }
        else {
            logger.warn(`Query not allowed:
      query: ${req.body.query}
      operationName: ${req.body.operationName}`);
            req.body.query = null;
        }
        next();
    };
}
exports.whitelisting = whitelisting;
function readEntities(dirPath, ext) {
    return lodash_1.fromPairs(fs
        .readdirSync(dirPath)
        .filter((file) => file.endsWith(ext))
        .map((file) => file.substr(0, file.length - ext.length))
        .map((file) => [file, fs.readFileSync(`${dirPath}/${file}${ext}`, 'utf-8')]));
}
//# sourceMappingURL=whitelisting.js.map