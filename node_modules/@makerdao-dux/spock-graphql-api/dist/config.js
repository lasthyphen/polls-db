"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfig = void 0;
const configUtils_1 = require("@makerdao-dux/spock-etl/dist/services/configUtils");
const modules_1 = require("@makerdao-dux/spock-etl/dist/utils/modules");
const lodash_1 = require("lodash");
const path_1 = require("path");
function getConfig(env, configPath) {
    // Here we'll have an array of one or more configs:
    const configs = modules_1.loadExternalModule(configPath);
    // The config module passed to this function is an array of two config objects,
    // the API and DB settings should be shared between all configs, so just pick the first.
    const [config] = configs;
    const externalConfig = fixConfigPaths(configPath, config);
    const defaultCfg = {
        db: {
            database: configUtils_1.getRequiredString(env, 'VL_DB_DATABASE'),
            user: configUtils_1.getRequiredString(env, 'VL_DB_USER'),
            password: configUtils_1.getRequiredString(env, 'VL_DB_PASSWORD'),
            host: configUtils_1.getRequiredString(env, 'VL_DB_HOST'),
            port: configUtils_1.getRequiredNumber(env, 'VL_DB_PORT'),
        },
        api: {
            port: 3001,
            whitelisting: {
                enabled: !!process.env.VL_GRAPHQL_WHITELISTING_ENABLED,
            },
            responseCaching: {
                enabled: !!process.env.VL_GRAPHQL_CACHING_ENABLED,
                duration: process.env.VL_GRAPHQL_CACHING_DURATION || '15 seconds',
                transformKey: (k) => k,
            },
        },
    };
    return lodash_1.merge({}, defaultCfg, externalConfig);
}
exports.getConfig = getConfig;
/**
 * Turn any relative paths in the config to absolute ones
 */
function fixConfigPaths(configPath, config) {
    const whitelistedQueriesDir = lodash_1.get(config, 'api.whitelisting.whitelistedQueriesDir');
    const newWhitelistedQueriesDir = whitelistedQueriesDir && path_1.join(path_1.dirname(configPath), whitelistedQueriesDir);
    if (!config.api) {
        config.api = {};
    }
    if (!config.api.whitelisting) {
        config.api.whitelisting = {};
    }
    config.api.whitelisting.whitelistedQueriesDir = newWhitelistedQueriesDir;
    return config;
}
//# sourceMappingURL=config.js.map