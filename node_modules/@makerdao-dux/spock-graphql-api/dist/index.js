"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.startAPI = void 0;
const logger_1 = require("@makerdao-dux/spock-etl/dist/utils/logger");
const printSystemInfo_1 = require("@makerdao-dux/spock-etl/dist/utils/printSystemInfo");
const body_parser_1 = __importDefault(require("body-parser"));
const compression_1 = __importDefault(require("compression"));
const express_1 = __importDefault(require("express"));
const helmet_1 = __importDefault(require("helmet"));
const path_1 = require("path");
const config_1 = require("./config");
const caching_1 = require("./middlewares/caching");
const graphqlLogging_1 = require("./middlewares/graphqlLogging");
const whitelisting_1 = require("./middlewares/whitelisting");
const ejs = require('ejs');
const { postgraphile } = require('postgraphile');
const FilterPlugin = require('postgraphile-plugin-connection-filter');
const logger = logger_1.getLogger('API');
function startAPI(config) {
    printSystemInfo_1.printSystemInfo(config);
    const app = express_1.default();
    app.use(compression_1.default());
    app.use(body_parser_1.default.json());
    app.use(helmet_1.default());
    // Rendering options for the index page
    app.engine('html', ejs.renderFile);
    app.set('views', path_1.join(__dirname, './views'));
    // Display a page at the subdomain root
    app.get('/', (_req, res) => res.render('index.html'));
    const graphqlConfig = {
        graphiql: true,
        graphqlRoute: '/v1',
        graphiqlRoute: '/v1/console',
        appendPlugins: [FilterPlugin],
        enableCors: true,
        watchPg: true,
    };
    const schemas = ['api'];
    if (config.api.whitelisting.enabled) {
        logger.info('Whitelisting enabled.');
        app.use(graphqlConfig.graphqlRoute, whitelisting_1.whitelisting(config.api.whitelisting.whitelistedQueriesDir, config.api.whitelisting.bypassSecret));
    }
    else {
        logger.info('Whitelisting disabled.');
    }
    logger.info('Enabling graphQL request logging');
    app.use(graphqlConfig.graphqlRoute, graphqlLogging_1.graphqlLogging);
    if (config.api.responseCaching.enabled) {
        app.use(caching_1.caching(config));
    }
    else {
        logger.info('Running without cache');
    }
    app.use(postgraphile(config.db, schemas, graphqlConfig));
    app.listen(config.api.port).on('listening', () => {
        logger.info(`Running a GraphQL API server at http://localhost:${config.api.port}`);
        logger.info(`Console: http://localhost:${config.api.port}/v1/console`);
    });
}
exports.startAPI = startAPI;
const rawPath = process.argv[2];
if (!rawPath) {
    throw new Error('You need to provide config as a first argument!');
}
const config = config_1.getConfig(process.env, rawPath);
startAPI(config);
//# sourceMappingURL=index.js.map