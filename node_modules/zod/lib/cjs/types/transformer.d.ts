import { ZodTypes } from "../ZodTypes";
import { ZodType, ZodTypeDef, ZodTypeAny } from "./base";
export interface ZodTransformerDef<T extends ZodTypeAny = ZodTypeAny, U extends ZodTypeAny = ZodTypeAny> extends ZodTypeDef {
    t: ZodTypes.transformer;
    input: T;
    output: U;
    transformer: (arg: T["_output"]) => U["_input"];
}
export declare class ZodTransformer<T extends ZodTypeAny, U extends ZodTypeAny> extends ZodType<U["_output"], ZodTransformerDef<T, U>, T["_input"]> {
    toJSON: () => {
        t: ZodTypes.transformer;
        left: object;
        right: object;
    };
    get output(): U;
    static create: <I extends ZodTypeAny, O extends ZodTypeAny>(input: I, output: O, transformer: (arg: I["_output"]) => O["_input"] | Promise<O["_input"]>) => ZodTransformer<I, O>;
    static fromSchema: <I extends ZodTypeAny>(input: I) => ZodTransformer<I, I>;
}
