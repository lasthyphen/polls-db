import { ZodType, ZodTypeDef, ZodTypeAny, ZodRawShape, input, output, TypeOf, RefinementCtx } from "./types/base";
import { ZodErrorMap } from "./defaultErrorMap";
import { ZodAny } from "./types/any";
import { ZodArray } from "./types/array";
import { ZodBigInt } from "./types/bigint";
import { ZodBoolean } from "./types/boolean";
import { ZodDate } from "./types/date";
import { ZodEnum } from "./types/enum";
import { ZodFunction } from "./types/function";
import { ZodIntersection } from "./types/intersection";
import { ZodLazy } from "./types/lazy";
import { ZodLiteral } from "./types/literal";
import { ZodMap } from "./types/map";
import { ZodNativeEnum } from "./types/nativeEnum";
import { ZodNever } from "./types/never";
import { ZodNull } from "./types/null";
import { ZodNullable, ZodNullableType } from "./types/nullable";
import { ZodNumber } from "./types/number";
import { ZodObject } from "./types/object";
import { ZodOptional, ZodOptionalType } from "./types/optional";
import { ZodPromise } from "./types/promise";
import { ZodRecord } from "./types/record";
import { ZodString } from "./types/string";
import { ZodTransformer } from "./types/transformer";
import { ZodTuple } from "./types/tuple";
import { ZodUndefined } from "./types/undefined";
import { ZodUnion } from "./types/union";
import { ZodUnknown } from "./types/unknown";
import { ZodVoid } from "./types/void";
import { ZodParsedType } from "./ZodParsedType";
import { ZodTypes } from "./ZodTypes";
import { ZodCodeGenerator } from "./codegen";
declare const stringType: () => ZodString;
declare const numberType: () => ZodNumber;
declare const bigIntType: () => ZodBigInt;
declare const booleanType: () => ZodBoolean;
declare const dateType: () => ZodDate;
declare const undefinedType: () => ZodUndefined;
declare const nullType: () => ZodNull;
declare const anyType: () => ZodAny;
declare const unknownType: () => ZodUnknown;
declare const neverType: () => ZodNever;
declare const voidType: () => ZodVoid;
declare const arrayType: <T extends ZodTypeAny>(schema: T) => ZodArray<T>;
declare const objectType: <T extends ZodRawShape>(shape: T) => ZodObject<T, "passthrough", ZodTypeAny, { [k_1 in keyof import("./helpers/objectUtil").objectUtil.addQuestionMarks<{ [k in keyof T]: T[k]["_output"]; }>]: import("./helpers/objectUtil").objectUtil.addQuestionMarks<{ [k in keyof T]: T[k]["_output"]; }>[k_1]; }, { [k_3 in keyof import("./helpers/objectUtil").objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_input"]; }>]: import("./helpers/objectUtil").objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_input"]; }>[k_3]; }>;
declare const unionType: <T extends [ZodTypeAny, ZodTypeAny, ...ZodTypeAny[]]>(types: T) => ZodUnion<T>;
declare const intersectionType: <T extends ZodTypeAny, U extends ZodTypeAny>(left: T, right: U) => ZodIntersection<T, U>;
declare const tupleType: <T extends [ZodTypeAny, ...ZodTypeAny[]] | []>(schemas: T) => ZodTuple<T>;
declare const recordType: <Value extends ZodTypeAny = ZodTypeAny>(valueType: Value) => ZodRecord<Value>;
declare const mapType: <Key extends ZodTypeAny = ZodTypeAny, Value extends ZodTypeAny = ZodTypeAny>(keyType: Key, valueType: Value) => ZodMap<Key, Value>;
declare const functionType: <T extends ZodTuple<any> = ZodTuple<[]>, U extends ZodTypeAny = ZodUnknown>(args?: T | undefined, returns?: U | undefined) => ZodFunction<T, U>;
declare const lazyType: <T extends ZodTypeAny>(getter: () => T) => ZodLazy<T>;
declare const literalType: <T extends string | number | bigint | boolean | null | undefined>(value: T) => ZodLiteral<T>;
declare const enumType: <U extends string, T extends [U, ...U[]]>(values: T) => ZodEnum<T>;
declare const nativeEnumType: <T extends {
    [k: string]: string | number;
    [nu: number]: string;
}>(values: T) => ZodNativeEnum<T>;
declare const promiseType: <T extends ZodTypeAny>(schema: T) => ZodPromise<T>;
declare const transformerType: <I extends ZodTypeAny, O extends ZodTypeAny>(input: I, output: O, transformer: (arg: I["_output"]) => O["_input"] | Promise<O["_input"]>) => ZodTransformer<I, O>;
declare const optionalType: <T extends ZodTypeAny>(type: T) => ZodOptionalType<T>;
declare const nullableType: <T extends ZodTypeAny>(type: T) => ZodNullableType<T>;
declare const ostring: () => ZodOptional<ZodString>;
declare const onumber: () => ZodOptional<ZodNumber>;
declare const oboolean: () => ZodOptional<ZodBoolean>;
declare const codegen: () => ZodCodeGenerator;
export declare const custom: <T>(check?: ((data: unknown) => any) | undefined, params?: Parameters<ZodTypeAny["refine"]>[1]) => ZodType<T, ZodTypeDef, T>;
declare const instanceOfType: <T extends new (...args: any[]) => any>(cls: T, params?: Parameters<ZodTypeAny["refine"]>[1]) => ZodType<InstanceType<T>, ZodTypeDef, InstanceType<T>>;
export { ZodType, ZodType as Schema, ZodType as ZodSchema, ZodTypeDef, ZodRawShape, RefinementCtx, ZodTypes, ZodAny, ZodArray, ZodBigInt, ZodBoolean, ZodCodeGenerator, ZodDate, ZodEnum, ZodErrorMap, ZodFunction, ZodIntersection, ZodLazy, ZodLiteral, ZodNativeEnum, ZodNever, ZodNull, ZodNullable, ZodNullableType, ZodNumber, ZodObject, ZodOptional, ZodOptionalType, ZodParsedType, ZodPromise, ZodRecord, ZodString, ZodTransformer, ZodTuple, ZodTypeAny, ZodUndefined, ZodUnion, ZodUnknown, ZodVoid, TypeOf as infer, input, output, TypeOf, anyType as any, arrayType as array, bigIntType as bigint, booleanType as boolean, codegen, dateType as date, enumType as enum, functionType as function, instanceOfType as instanceof, intersectionType as intersection, lazyType as lazy, literalType as literal, mapType as map, nativeEnumType as nativeEnum, neverType as never, nullType as null, nullableType as nullable, numberType as number, objectType as object, oboolean, onumber, optionalType as optional, ostring, promiseType as promise, recordType as record, stringType as string, transformerType as transformer, tupleType as tuple, undefinedType as undefined, unionType as union, unknownType as unknown, voidType as void, };
export declare const late: {
    object: <T extends ZodRawShape>(shape: () => T) => ZodObject<T, "passthrough", ZodTypeAny, { [k_1 in keyof import("./helpers/objectUtil").objectUtil.addQuestionMarks<{ [k in keyof T]: T[k]["_output"]; }>]: import("./helpers/objectUtil").objectUtil.addQuestionMarks<{ [k in keyof T]: T[k]["_output"]; }>[k_1]; }, { [k_3 in keyof import("./helpers/objectUtil").objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_input"]; }>]: import("./helpers/objectUtil").objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_input"]; }>[k_3]; }>;
};
export * from "./ZodDef";
export * from "./ZodError";
